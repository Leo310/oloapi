# comment to remove endles checking pipeline status
stages:
  - build
  - test
  - deploy_stage

default:
  # Use the official docker image.
  image: docker/compose:latest
  services:
    - docker:dind

.only_default: &only_default
  if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    
docker_build:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "docker.institut4000.gmbh/olo/oloapi${tag}" .
  
  # Run this job in a branch where a Dockerfile exists
  rules:
    - <<: *only_default
      exists:
        - Dockerfile


postman_tests:
  stage: test
  before_script:
    - docker-compose up -d
  script:
    - docker run --network host -v $(pwd)/tests:/etc/newman -t postman/newman:latest run "oLo.postman_collection.json" --folder user
  after_script:
    - docker-compose down
  rules:
    - <<: *only_default

linter:
  image: golang:latest
  stage: test
  script:
    - cd api
    - go get -u golang.org/x/lint/golint
    - golint -set_exit_status $(go list ./...)
  rules:
    - <<: *only_default

unit_tests:
  image: golang:latest
  stage: test
  script:
    - cd ./api
    - go get gotest.tools/gotestsum
    - gotestsum --junitfile ../tests/unitreport/report.xml --format testname --packages $(go list ./...)
  artifacts:
    when: always #upldoads even when job fails
    reports:
      junit: tests/unitreport/report.xml
  rules:
    - <<: *only_default

code_coverage:
  image: golang:latest
  stage: test
  script:
    - cd ./api
    - go get github.com/t-yuki/gocover-cobertura
    - go test -coverprofile=../tests/coverage/coverage.txt -covermode count $(go list ./...)
    - gocover-cobertura < ../tests/coverage/coverage.txt > ../tests/coverage/coverage.xml
    - go tool cover -html=../tests/coverage/coverage.txt -o ../tests/coverage/coverage.html
  artifacts:
    paths:
      - tests/coverage/coverage.html
    reports:
      cobertura: tests/coverage/coverage.xml
  rules:
    - <<: *only_default

docker_deploy_stage:
  stage: deploy_stage
  script:  
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - <<: *only_default
